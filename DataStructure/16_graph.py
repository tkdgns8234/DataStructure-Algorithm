# graph 자료구조
# 가장 복잡한 (일반적인) 자료구조
# G = (V,E) V:vertex set E: edge set
# V = {1,2,3,4,5,6}
# E = {(1,2), (), ...}

# degree : 인접성
# path: 경로 (중복노드가 있으면 안됨)
# 싸이클
# 싸이클이 없는 그래프: 트리
# 싸이클이 있는 그래프의 경우 두 노드를 연결하는 path가 2개이상임

# graph 표현 방법 1. 인접행렬(2차원배열) 2. 인접리스트 (배열+연결리스트)


# n:노드 수 m: 엣지 수
# 1. 인접행렬 
# momory O(n제곱)
# 인접행렬인지 판단하는 시간: 상수시간
# ~에 인접한 모든 노드에 대해: O(n)
# 삽입: 상수시간
# 삭제: 상수시간

# 2. 인접리스트 
# memory O(n+m)
# 인접행렬인지 판단하는 시간: O(m)
# ~에 인접한 모든 노드에 대해: O(m)
# 삽입: 상수시간 (헤드노드에 푸쉬)  // 파이썬list에 헤드삽입의경우 한칸씩 다 뒤로 밀림
# 삭제: 탐색+삭제 ==> O(m)

# 노드에 비해 엣지수가많은경우 메모리 낭비 덜함 =>행열사용유리
# 노드에비해 엣지가 적은경우 => 인접리스트에대한 시간복잡도 평균적으로 낮음
