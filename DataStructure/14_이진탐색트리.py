# 가장 일반적으로 사용되는 이진트리
# 이진 트리에서 탐색을 효율적으로 할 수 있도록 변경
# 링크드리스트 + 이진탐색이라고 보면 된다 링크드리스트의 삽입삭제 -> O(1) 이진탐색의 탐색속도 -> O(logn)  각각의 단점을 보완한 이진탐색트리

# 작은수가 하위 왼쪽노드 큰 수가 하위 오른쪽 노드
# 읽을땐 inorder 방식으로 읽는다 LMR

# 서치시간 -> O(h) h= 높이
# height가 낮을수록 서치,삽입,삭제 시간이 줄어듬
# 삽입삭제는 1의 시간이니까 서치+삽입 or 삭제
# =:> 삽입, 삭제는 O(h) 만큼의 시간 소요

# 삭제 -> delete by copying / merging 이 있음
# 머징의 경우 왼쪽 서브트리 전부를 삭제된 위치로 옮기고 삭제된노드의 오른쪽하위노드를 왼쪽서브트리의 맨 오른쪽 리프노드에 붙힌다

# 카피의 경우 삭제된 노드의 좌측노드의 가장 큰 값 또는 삭제된 노드의 우측노드의 가장 작은 값을 집어넣는다 연결하는건 알아서 

# 이진탐색트리는 완벽하네? 탐색 삽입 삭제 다 물론 h이커지면 효율이 떨어지긴 하겠지
# h를 최소화하기위한 균형이진탐색트리가 존재함

# 이진탐색트리 클래스를 상속받으면됨
